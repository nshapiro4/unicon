package ulsp

link ximage

#  Processes all symbols in a document and constructs a result to return to the client.
class SymbolHandler(file_handler)

   #  Sets the class variables for the SymbolHandler.
   #  Params: new_file_handler - The file_handler object created from the parameters of the
   #                             request sent by the client.
   method setVariables(new_file_handler)
      file_handler := new_file_handler
   end

   #  Searches through the provided file_handler for all procedures, classes, methods, and
   #  variables and constructs a result to send back to the client of all document symbols.
   method run()
      local procedure_name, procedure_table, class_name, class_table,
            method_name, method_table, variable_name, class_symbol, method_symbol,
            pos_table, sl, sc, el, ec, entity_table, proc_symbol, var_symbol,
            initially_table, variable_table, results_list
      results_list := []
      pos_table := file_handler.getInternalPositions()
      entity_table := table()

      # Get procedures from file_handler
      every procedure_name := key(file_handler.getInternalProcedures()) do {
         if member(pos_table["procedures"], procedure_name) then {
            procedure_table := pos_table["procedures"][procedure_name]

            proc_symbol := constructResult(
               procedure_name,
               12,
               procedure_table["range"]["start"][1],
               procedure_table["range"]["start"][2],
               procedure_table["range"]["end"][1],
               procedure_table["range"]["end"][2],
               procedure_table["selectionRange"]["start"][1],
               procedure_table["selectionRange"]["start"][2],
               procedure_table["selectionRange"]["end"][1],
               procedure_table["selectionRange"]["end"][2],
               []
            )
            entity_table[procedure_name] := proc_symbol
            put(results_list, proc_symbol)
         }
      }

      # Get classes and their methods from file_handler
      every class_name := key(file_handler.getInternalClasses()) do {
         if member(pos_table["classes"], class_name) then {
            class_table := pos_table["classes"][class_name]

            class_symbol := constructResult(
               class_name,
               5,
               class_table["range"]["start"][1],
               class_table["range"]["start"][2],
               class_table["range"]["end"][1],
               class_table["range"]["end"][2],
               class_table["selectionRange"]["start"][1],
               class_table["selectionRange"]["start"][2],
               class_table["selectionRange"]["end"][1],
               class_table["selectionRange"]["end"][2],
               []
            )
         }

         # Get methods inside classes from file_handler
         every method_name := key(file_handler.getInternalClasses()[class_name]["methods"]) do {
            if member(pos_table["methods"], method_name) then {
               method_table := pos_table["methods"][method_name]

               method_symbol := constructResult(
                  method_name,
                  6,
                  method_table["range"]["start"][1],
                  method_table["range"]["start"][2],
                  method_table["range"]["end"][1],
                  method_table["range"]["end"][2],
                  method_table["selectionRange"]["start"][1],
                  method_table["selectionRange"]["start"][2],
                  method_table["selectionRange"]["end"][1],
                  method_table["selectionRange"]["end"][2],
                  []
               )
               entity_table[method_name] := method_symbol
               put(class_symbol["children"], method_symbol)
            }
         }

         # Get initially sections inside classes from file_handler
         if member(pos_table, "initially") && member(pos_table["initially"], class_name) then {
            initially_table := pos_table["initially"][class_name]

            method_symbol := constructResult(
               "initially",
               9,
               initially_table["range"]["start"][1],
               initially_table["range"]["start"][2],
               initially_table["range"]["end"][1],
               initially_table["range"]["end"][2],
               initially_table["selectionRange"]["start"][1],
               initially_table["selectionRange"]["start"][2],
               initially_table["selectionRange"]["end"][1],
               initially_table["selectionRange"]["end"][2],
               []
            )
            entity_table["initially" || class_name] := method_symbol
            put(class_symbol["children"], method_symbol)
         }

         put(results_list, class_symbol)
      }

      # Get variables from file_handler
      every variable_name := key(file_handler.getVariables()) do {
         if member(pos_table["variables"], variable_name) then {
            variable_table := pos_table["variables"][variable_name]
            sl := variable_table["selectionRange"]["start"][1]
            sc := variable_table["selectionRange"]["start"][2]
            el := variable_table["selectionRange"]["end"][1]
            ec := variable_table["selectionRange"]["end"][2]
            var_symbol := constructResult(variable_name, 13, sl, sc, el, ec, sl, sc, el, ec, [])
            parent := find_parent_entity(sl, sc, el, ec, entity_table)
            if \parent then {
               put(parent["children"], var_symbol)
            } else {
               put(results_list, var_symbol)
            }
         }
      }

      return results_list
   end

   #  Finds a parent of a variable, if one exists.
   #  Params: v_rsl - The variable's starting line of its range.
   #          v_rsc - The variable's starting character of its range.
   #          v_rel - The variable's ending line of its range.
   #          v_rec - The variable's ending character of its range.
   #          entity_table - A table containing all entities in the document, i.e. classes, methods, procedures.
   #  <i>This is intended for internal use only!</i>
   method find_parent_entity(v_rsl, v_rsc, v_rel, v_rec, entity_table)
      local parent, p_rsl, p_rsc, p_rel, p_rec
      every parent := !entity_table do {
         p_rsl := parent["range"]["start"]["line"]
         p_rsc := parent["range"]["start"]["character"]
         p_rel := parent["range"]["end"]["line"]
         p_rec := parent["range"]["end"]["character"]

         if (p_rsl < v_rsl | (p_rsl == v_rsl & p_rsc <= v_rsc)) &
            (p_rel > v_rel | (p_rel == v_rel & p_rec >= v_rec)) then {
            return parent
         }
      }
      return
   end

   #  Constructs a result table with all of the selected parameters.
   #  Params: nam - The name of the symbol.
   #          kin - An integer code for the type of symbol.
   #          rsl - The starting line for the range of the entire symbol.
   #          rsc - The starting character for the range of the entire symbol.
   #          rel - The ending line for the range of the entire symbol.
   #          rec - The ending character for the range of the entire symbol.
   #          ssl - The starting line of the selection range of the symbol's name.
   #          ssc - The starting character of the selection range of the symbol's name.
   #          sel - The ending line of the selection range of the symbol's name.
   #          sec - The ending character of the selection range of the symbol's name.
   #          chi - A list of results of children of this symbol, i.e. a method belonging to a class.
   #  <i>This is intended for internal use only!</i>
   method constructResult(nam, kin, rsl, rsc, rel, rec, ssl, ssc, sel, sec, chi)
      local results_table := table(
         "name", nam,
         "kind", kin,
         "range", table(
            "start", table(
               "line", rsl,
               "character", rsc
            ),
            "end", table(
               "line", rel,
               "character", rec
            )
         ),
         "selectionRange", table(
            "start", table(
               "line", ssl,
               "character", ssc
            ),
            "end", table(
               "line", sel,
               "character", sec
            )
         ),
         "children", chi
      )

      return results_table
   end
end